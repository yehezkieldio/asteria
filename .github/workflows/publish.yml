name: publish

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Name of the crate to publish (e.g., asteria-server)"
        required: false
        default: "all"
      release_type:
        description: "Type of release (minor, major, patch, rc)"
        required: false
        default: "manual"

  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # e.g., v1.0.0
      - "asteria-server-v[0-9]+.[0-9]+.[0-9]+" # e.g., asteria-server-v1.2.3
      - "asteria-client-v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"

jobs:
  publish:
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
            ext: ""
            package_constraint: "asteria-client"
          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
            ext: ".exe"
            package_constraint: "asteria-server"
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev pkg-config libinput-dev

      - name: Cache dependencies
        uses: swatinem/rust-cache@v2

      - name: Determine Package to Build
        id: pkg
        shell: bash
        run: |
          selected_pkg="${{ github.event.inputs.package }}"
          tag_pkg=""

          if [[ "${{ github.event_name }}" == "push" ]]; then
            tag="${GITHUB_REF#refs/tags/}"
            if [[ "$tag" =~ ^(asteria-[a-z]+)-v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              tag_pkg="${BASH_REMATCH[1]}"
            fi
          fi

          final_pkg=""

          # Logic for workflow_dispatch input or tag
          if [[ "$selected_pkg" != "all" ]]; then
            final_pkg="$selected_pkg"
          elif [[ -n "$tag_pkg" ]]; then
            final_pkg="$tag_pkg"
          else
            final_pkg="${{ matrix.package_constraint }}" # Default to the platform's constrained package
          fi

          # Ensure the selected package matches the platform's constraint
          if [[ "$final_pkg" != "${{ matrix.package_constraint }}" && "$final_pkg" != "all" ]]; then
            echo "Skipping build for package '$final_pkg' on platform '${{ matrix.platform }}' as it's not constrained to '${{ matrix.package_constraint }}'."
            echo "selected_package=skip" >> $GITHUB_OUTPUT
          else
            echo "selected_package=$final_pkg" >> $GITHUB_OUTPUT
          fi

      - name: Build Release
        shell: bash
        run: |
          mkdir -p release
          pkg="${{ steps.pkg.outputs.selected_package }}"

          # Extract version from Cargo.toml or from the tag if available
          version="${{ github.ref_name }}"
          if [[ "$version" =~ ^v?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            version="${BASH_REMATCH[1]}"
          else
            # Fallback: parse version from Cargo.toml
            version=$(grep '^version =' "crates/${{ matrix.package_constraint }}/Cargo.toml" | head -n1 | cut -d '"' -f2)
          fi

          if [[ "$pkg" == "all" || "$pkg" == "${{ matrix.package_constraint }}" ]]; then
            build_pkg_name="${{ matrix.package_constraint }}"
            cargo build --release --package "$build_pkg_name" --target ${{ matrix.target }}
            bin_name=$(echo "$build_pkg_name" | sed 's/^asteria-//')
            cp target/${{ matrix.target }}/release/$bin_name${{ matrix.ext }} \
              release/${bin_name}-${version}-${{ matrix.platform }}${{ matrix.ext }}
          else
            echo "No build performed for $pkg on ${{ matrix.platform }}."
          fi

      - name: Upload Artifacts
        if: success() && steps.pkg.outputs.selected_package != 'skip'
        uses: actions/upload-artifact@v4
        with:
          name: asteria-${{ matrix.package_constraint }}-${{ matrix.platform }}-${{ github.ref_name }}
          path: release/*

  create-release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect binaries
        run: |
          mkdir -p release
          find artifacts -type f -exec cp {} release/ \;
          ls -la release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
